---
- hosts: router

  tasks:
    - name: Set the correct timezone
      routeros_command:
        commands:
           - /system clock set time-zone-name={{ mikrotik.timezone }}

    - name: Set silent boot to yes
      routeros_command:
        commands:
           - /system routerboard settings set silent-boot=yes

    - name: Set the webfig port
      routeros_command:
        commands:
           - /ip service set www port={{ mikrotik.webfig_port }}

    - name: Add guest bridge
      routeros_command:
        commands:
           - /interface bridge add name={{ mikrotik.bridge_guest.name }}

    - name: Add guest bridge
      routeros_command:
        commands:
           - /interface vlan add interface=wlan1 name={{ mikrotik.guest_vlan.name }} vlan-id={{ mikrotik.guest_vlan.id }}

    - name: Add IP Pool for guest network
      routeros_command:
        commands:
           - /ip pool add name={{ mikrotik.dhcp_guest.name }} ranges={{ mikrotik.dhcp_guest.dhcp_range }}

    - name: Add the Guest IP Pool to the DHCP server 
      routeros_command:
        commands:
           - /ip dhcp-server add address-pool={{ mikrotik.dhcp_guest.name }} disabled=no interface={{ mikrotik.bridge_guest.name }} name={{ mikrotik.dhcp_guest.server_name }}
        
    - name: Guest bridge to guest VLAN
      routeros_command:
        commands:
           - /interface bridge port add bridge={{ mikrotik.bridge_guest.name }} interface={{ mikrotik.guest_vlan.name }}
        
    - name: Setup the guest network
      routeros_command:
        commands:
           - /ip address add address={{ mikrotik.dhcp_guest.gateway }}/{{ mikrotik.dhcp_guest.subnet_mask }} interface={{ mikrotik.bridge_guest.name }} network={{ mikrotik.dhcp_guest.network }}

    - name: Setup DHCP for guest network
      routeros_command:
        commands:
           - /ip dhcp-server network add address={{ mikrotik.dhcp_guest.network }}/{{ mikrotik.dhcp_guest.subnet_mask }} gateway={{ mikrotik.dhcp_guest.gateway }}
        
    - name: Prevent machines in guest network to access the private network
      routeros_command:
        commands:
           - /ip firewall filter add action=drop chain=forward in-interface={{ mikrotik.bridge_guest.name }} out-interface=bridge

    - name: Add security profile for the guest Wi-Fi
      routeros_command:
        commands:
           - /interface wireless security-profiles add name=guests authentication-types=wpa2-psk mode=dynamic-keys wpa2-pre-shared-key="{{ mikrotik.wifi.guest.password }}"

    - name: Set the Guest Wi-Fi
      routeros_command:
        commands:
           - /interface wireless set wlan1 ssid="{{ mikrotik.wifi.guest.ssid }}" security-profile=guests vlan-id={{ mikrotik.guest_vlan.id }} vlan-mode=use-tag

    - name: Add iot VLAN
      routeros_command:
        commands:
           - /interface vlan add interface=wlan1 name={{ mikrotik.iot_vlan.name }} vlan-id={{ mikrotik.iot_vlan.id }}

    - name: iot bridge to iot VLAN
      routeros_command:
        commands:
           - /interface bridge port add bridge={{ mikrotik.bridge_iot.name }} interface={{ mikrotik.iot_vlan.name }}

    - name: Add virtual 2.4Ghz interface for iot network
      routeros_command:
        commands:
           - /interface wireless add disabled=no mac-address={{ mikrotik.wifi.iot.mac }} master-interface=wlan1 name=wlan3 ssid={{ mikrotik.wifi.iot.ssid }} wds-default-bridge={{ mikrotik.bridge_iot.name }} wps-mode=disabled

    - name: Add IP Pool for iot network
      routeros_command:
        commands:
           - /ip pool add name={{ mikrotik.dhcp_iot.name }} ranges={{ mikrotik.dhcp_iot.dhcp_range }}

    - name: Add the iot IP Pool to the DHCP server 
      routeros_command:
        commands:
           - /ip dhcp-server add address-pool={{ mikrotik.dhcp_iot.name }} disabled=no interface={{ mikrotik.bridge_iot.name }} name={{ mikrotik.dhcp_iot.server_name }}
        
    - name: Setup the iot network
      routeros_command:
        commands:
           - /ip address add address={{ mikrotik.dhcp_iot.gateway }}/{{ mikrotik.dhcp_iot.subnet_mask }} interface={{ mikrotik.bridge_iot.name }} network={{ mikrotik.dhcp_iot.network }}

    - name: Setup DHCP for iot network
      routeros_command:
        commands:
           - /ip dhcp-server network add address={{ mikrotik.dhcp_iot.network }}/{{ mikrotik.dhcp_iot.subnet_mask }} gateway={{ mikrotik.dhcp_iot.gateway }}
        
    - name: Prevent machines in iot network to access the private network
      routeros_command:
        commands:
           - /ip firewall filter add action=drop chain=forward in-interface={{ mikrotik.bridge_iot.name }} out-interface=bridge

    - name: Add security profile for the iot Wi-Fi
      routeros_command:
        commands:
           - /interface wireless security-profiles add name=iots authentication-types=wpa2-psk mode=dynamic-keys wpa2-pre-shared-key="{{ mikrotik.wifi.iot.password }}"

    - name: Set the iot Wi-Fi
      routeros_command:
        commands:
           - /interface wireless set wlan3 ssid="{{ mikrotik.wifi.iot.ssid }}" security-profile=iots vlan-id={{ mikrotik.iot_vlan.id }} vlan-mode=use-tag

    - name: Add security profile for the main Wi-Fi
      routeros_command:
        commands:
           - /interface wireless security-profiles add name=main_wifi authentication-types=wpa2-psk mode=dynamic-keys wpa2-pre-shared-key="{{ mikrotik.wifi.main.password }}"

    - name: Set the main Wi-Fi
      routeros_command:
        commands:
           - /interface wireless set wlan2 ssid="{{ mikrotik.wifi.main.ssid }}" security-profile=main_wifi
  


# scp ${process.env.HOME}/.ssh/id_rsa.pub ${config.mikrotik.default_username}@${config.mikrotik.default_ip}:/
# ssh ${config.mikrotik.default_username}@${config.mikrotik.default_ip} << EOF

#     

#     /ip dns set servers=${config.mikrotik.dns_servers}

#     /user add name=${process.env.LOGNAME} group=full comment="Username matching host machine's active user" disabled=no  
#     /user ssh-keys import public-key-file=id_rsa.pub user=${process.env.LOGNAME}


#     ${config.mikrotik.dhcp_static.map(machine => `/ip dhcp-server lease add address=${machine.ip} mac-address=${machine.mac} comment="${machine.comment}"`).join("\n    ")}
    
# EOF